#!/usr/bin/env python3
# -*- coding: utf8 -*-

"""
:Author: Victor Ythier
:Date: 09/12/2020

Set of rules related to the bismark/bwt2 alignment.
"""
# IMPORT
from HiTransMeth import settings

"""
Run the adapter removal rule inversing R1 and R2
"""
rule adapter_removal:
    input:
        fwd = R1,
        rev = R2,
        adapter_fa = {settings.references["ADAPTER_FASTA"]}
    output:
        real_foward = "ADAPT_trimmed_barcode_adapt20nt_2.fastq",
        real_reverse = "ADAPT_trimmed_barcode_adapt20nt_1.fastq",
        log = "ADAPT_trimmed.log"
    params:
        suffix = "ADAPT_trimmed"
    conda:
        "envs/flexbar.yaml"
    threads:
        2
    resources:
        cores = 2
    shell:
        """
        flexbar -r {input.rev} -p {input.fwd} \\
        -b {input.adapter_fa} \\
        -be 0.2 -bt LEFT -qt 0 \\
        -t {params.suffix}
        """

"""
Run the barcode removal rule of the inversing output of the adapter_removal rule
"""
rule barcode_removal:
    input:
        real_fwd = rules.adapter_removal.output.real_foward,
        real_rev = rules.adapter_removal.output.real_reverse,
        barcode_fa = config['CONDITIONS']
    output:
        BC_trim_real_fwd = "BC_trimmed_barcode_{condition}_1.fastq",
        BC_trim_real_rev = "BC_trimmed_barcode_{condition}_2.fastq",
        log = "BC_trimmed.log"
    params:
        suffix = "BC_trimmed"
    conda:
        "envs/flexbar.yaml"
    threads:
        2
    resources:
        cores = 2
    shell:
        """
        flexbar -r {input.real_fwd} -p {input.real_rev} \\
        -b {input.barcode_fa} \\
        -be 0.0 -bt LEFT -qt 20 --umi-tags \\
        -t {params.suffix}
        """

"""
Run the motilf_filtering script to split fastq by motif for each condition
"""
rule motif_filtering:
    input:
        R1_fwd = rules.barcode_removal.output.BC_trim_real_fwd,
        R2_rev = rules.barcode_removal.output.BC_trim_real_rev,
        motif_table = config['MOTIF_TABLE']
    output:
        sideA_R1_motif_fwd = temp("{{condition}}.{motif}_A.R1.fq.gz"),
        sideA_R2_motif_rev = temp("{{condition}}.{motif}_A.R2.fq.gz"),
        sideB_R1_motif_fwd = temp("{{condition}}.{motif}_B.R1.fq.gz"),
        sideB_R2_motif_rev = temp("{{condition}}.{motif}_B.R2.fq.gz"),
        merge_R1_motif_fwd = "{{condition}}.{motif}.R1.fq.gz",
        merge_R2_motif_rev = "{{condition}}.{motif}.R1.fq.gz",
        #occur_table = "{{condition}}.{motif}....occurence.txt"
    params:
        sideA = "rev",
        sideB = "fwd",
        missmatch = 0
    conda:
        "envs/motif_demultiplex_R.yaml"
    script:
        "scripts/motif_filtering.R"

